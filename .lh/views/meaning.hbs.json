{
    "sourceFile": "views/meaning.hbs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1708811521126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708811531959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,151 @@\n-<link\r\n-    rel=\"stylesheet\"\r\n-    href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css\"\r\n-    integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\"\r\n-    crossorigin=\"anonymous\"\r\n-/>\r\n+<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css\" \r\n+                  integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\"\r\n+                  crossorigin=\"anonymous\">\r\n \r\n {{#if wordName}}\r\n     {{#if meanings}}\r\n-        <div class=\"titleContainer\">\r\n-            <h2 class=\"wordName\">{{wordName}}</h2>\r\n-            <audio id=\"audio\" src={{audio}}></audio>\r\n-            <span\r\n-                class=\"glyphicon glyphicon-volume-up playbutton\"\r\n-                onclick=\"playAudio()\"\r\n-            ></span>\r\n-        </div>\r\n+    <div class=\"titleContainer\">\r\n+        <h2 class=\"wordName\">{{wordName}}</h2>\r\n+        <audio id=\"audio\" src={{audio}}></audio>\r\n+        <span class=\"glyphicon glyphicon-volume-up playbutton\" onclick=\"playAudio()\"></span>\r\n+    </div>\r\n \r\n-        <div class=\"buttons\">\r\n-            <button class=\"btn\" onclick=\"showMeanings()\">Meaning</button>\r\n-            <button class=\"btn\" onclick=\"showSynonyms()\">Synonyms</button>\r\n-            <button class=\"btn\" onclick=\"showAntonyms()\">Antonyms</button>\r\n-        </div>\r\n+    <div class=\"buttons\" >\r\n+        <button class=\"btn\" onclick=\"showMeanings()\">Meaning</button>\r\n+        <button class=\"btn\" onclick=\"showSynonyms()\">Synonyms</button>\r\n+        <button class=\"btn\" onclick=\"showAntonyms()\">Antonyms</button>\r\n+    </div>\r\n \r\n         <div class=\"bodyContainer\">\r\n-            {{#each meanings}}\r\n-                <span><b>{{count}}</b></span><p class=\"meaningParagraph\">\r\n-                    {{this.meaning}}</p><br />\r\n-                {{#if this.examples}}\r\n-                    <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b>\r\n-                    <p class=\"meaningParagraph\">{{this.examples}}</p><br />\r\n-                    {{#else}}\r\n-                        <br />\r\n-                    {{/else}}\r\n-                {{/if}}\r\n-            {{/each}}\r\n-\r\n+                {{#each meanings}}\r\n+                    <span><b>{{count}}</b></span><p class=\"meaningParagraph\"> {{this.meaning}}</p><br>\r\n+                            {{#if this.examples}}\r\n+                                <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> \r\n+                                <p class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n+                                {{#else}}\r\n+                                    <br>\r\n+                                {{/else}}\r\n+                            {{/if}}\r\n+                {{/each}}\r\n+            \r\n         </div>\r\n-    {{else}}\r\n-        <div class=\"titleContainer\">\r\n-            <h2 class=\"wordName\">{{wordName}}</h2>\r\n-        </div>\r\n-        <div class=\"bodyContainer\">\r\n-            <p>{{error}}</p>\r\n-        </div>\r\n-    {{/if}}\r\n+        {{else}}\r\n+            <div class=\"titleContainer\">\r\n+                <h2 class=\"wordName\">{{wordName}}</h2>\r\n+            </div>\r\n+            <div class=\"bodyContainer\">\r\n+                <p>{{error}}</p>\r\n+            </div>\r\n+        {{/if}}\r\n {{/if}}\r\n \r\n+\r\n <script>\r\n \r\n-    // These three line can make the first letter of the word to upperCase var\r\n-    toupper = document.querySelector('.wordName').innerHTML; toupper =\r\n-    toupper[0].charAt(0).toUpperCase() + toupper.slice(1);\r\n-    document.querySelector('.wordName').innerHTML = toupper; //This was to fix a\r\n-    small bug to reset the counter whenever the //page is refreshed!\r\n+    // These three line can make the first letter of the word to upperCase\r\n+    var toupper = document.querySelector('.wordName').innerHTML;\r\n+    toupper = toupper[0].charAt(0).toUpperCase() + toupper.slice(1);\r\n+    document.querySelector('.wordName').innerHTML = toupper;\r\n+\r\n+    //This was to fix a small bug to reset the counter whenever the \r\n+    //page is refreshed!\r\n     window.onbeforeunload = function(){\r\n-    {{countReset}}\r\n-    } var synonyms = []; var antonyms = []; /* The async function is very\r\n-    Important here and also the await! without this this function is not\r\n-    possible if we dont want to complicate things since the fetch is\r\n-    asynchronous function */ async function loadData(){ var url =\r\n-    `https://api.api-ninjas.com/v1/thesaurus?word=`; const apiKey =\r\n-    \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\" try { const response = await\r\n-    fetch(url + '{{wordName}}', { method: 'GET', headers: { 'X-Api-Key': apiKey,\r\n-    'Accept': 'application/json' } }); const data = await response.json();\r\n-    if(data.synonyms) synonyms = data.synonyms; if(data.antonyms) antonyms =\r\n-    data.antonyms; } catch(error) { //Just for debugging console.error(error); }\r\n-    } function showMeanings(){\r\n-    document.querySelector('.bodyContainer').innerHTML = `\r\n-    {{#each meanings}}\r\n-        <span><b>{{count}}</b></span><p class=\"meaningParagraph\">\r\n-        {{this.meaning}}</p><br>\r\n-        {{#if this.examples}}\r\n-            <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> <p\r\n-            class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n-            {{#else}}\r\n-                <br>\r\n-            {{/else}}\r\n-        {{/if}}\r\n-    {{/each}}\r\n-    ` } async function showSynonyms(){ /* Here we are waiting for fetch from\r\n-    loadData to get the values first and then the rest of code will compile to\r\n-    use the values set by loaddata() */ await loadData(); var html = \"\"; for\r\n-    (var i = 0; i < synonyms.length; i++) { if(i<9) html +=\r\n-    `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">`\r\n-    + synonyms[i] + `</p><br>`; else html +=\r\n-    `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` +\r\n-    synonyms[i] + `</p><br>`; /* //This is second design html += `<span>` +\r\n-    synonyms[i] + `</span>`; if(i != synonyms.length - 1) html += `,` */ } //\r\n-    This is when the array is empty if(synonyms.length === 0) html = `<p>No\r\n-    Antonyms Are Available</p>`\r\n-    document.querySelector('.bodyContainer').innerHTML = `${html}`; } async\r\n-    function showAntonyms(){ await loadData(); var html = \"\"; for (var i = 0; i\r\n-    < antonyms.length; i++) { if(i<9) html +=\r\n-    `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">`\r\n-    + antonyms[i] + `</p><br>`; else html +=\r\n-    `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` +\r\n-    antonyms[i] + `</p><br>`; /* //This is second design html += `<span>` +\r\n-    antonyms[i] + `</span>`; if(i != antonyms.length - 1) html += `,` */ } //\r\n-    This is when the array is empty if(antonyms.length === 0) html = `<p>No\r\n-    Antonyms Are Available</p>`\r\n-    document.querySelector('.bodyContainer').innerHTML = `${html}`; }\r\n+        {{countReset}}\r\n+    }\r\n \r\n+    var synonyms = [];\r\n+    var antonyms = [];\r\n+\r\n+    /*  The async function is very Important here and also the await!\r\n+        without this this function is not possible if we dont want\r\n+        to complicate things since the fetch is asynchronous function\r\n+    */\r\n+    async function loadData(){    \r\n+        var url = `https://api.api-ninjas.com/v1/thesaurus?word=`;\r\n+        const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\"\r\n+\r\n+        try {\r\n+            const response = await fetch(url + '{{wordName}}', {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                'X-Api-Key': apiKey,\r\n+                'Accept': 'application/json'\r\n+                }\r\n+            });\r\n+            const data = await response.json();\r\n+\r\n+            if(data.synonyms) \r\n+                synonyms = data.synonyms;\r\n+            if(data.antonyms) \r\n+                antonyms = data.antonyms;\r\n+\r\n+        }   catch(error) {\r\n+                //Just for debugging\r\n+                console.error(error);\r\n+            }\r\n+    }\r\n+\r\n+    function showMeanings(){\r\n+        document.querySelector('.bodyContainer').innerHTML = `\r\n+            {{#each meanings}}\r\n+                <span><b>{{count}}</b></span><p class=\"meaningParagraph\"> {{this.meaning}}</p><br>\r\n+                        {{#if this.examples}}\r\n+                        <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> \r\n+                            <p class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n+                        {{#else}}\r\n+                            <br>\r\n+                        {{/else}}\r\n+                        {{/if}}\r\n+            {{/each}}\r\n+        `\r\n+    }\r\n+\r\n+    async  function showSynonyms(){\r\n+        /*\r\n+            Here we are waiting for fetch from loadData\r\n+            to get the values first and then the rest of\r\n+            code will compile to use the values set by loaddata()\r\n+        */\r\n+        await loadData();\r\n+        var html = \"\";\r\n+        for (var i = 0; i < synonyms.length; i++) {\r\n+            if(i<9)\r\n+                html += `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p><br>`;\r\n+            else\r\n+                html += `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p><br>`;\r\n+           /*\r\n+           //This is second design\r\n+            html += `<span>` + synonyms[i] + `</span>`;\r\n+            if(i != synonyms.length - 1) html += `,`\r\n+            */\r\n+        }\r\n+\r\n+        // This is when the array is empty\r\n+        if(synonyms.length === 0) html = `<p>No Antonyms Are Available</p>`\r\n+\r\n+        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n+    }\r\n+   \r\n+   \r\n+    async  function showAntonyms(){\r\n+        await loadData();\r\n+        var html = \"\";\r\n+        for (var i = 0; i < antonyms.length; i++) {\r\n+            if(i<9)\r\n+                html += `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p><br>`;\r\n+            else\r\n+                html += `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p><br>`;\r\n+           /*\r\n+           //This is second design\r\n+            html += `<span>` + antonyms[i] + `</span>`;\r\n+            if(i != antonyms.length - 1) html += `,`\r\n+            */\r\n+        }\r\n+        // This is when the array is empty\r\n+        if(antonyms.length === 0) html = `<p>No Antonyms Are Available</p>`\r\n+\r\n+        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n+    }\r\n+   \r\n+\r\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708811575453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,151 +1,104 @@\n-<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css\" \r\n-                  integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\"\r\n-                  crossorigin=\"anonymous\">\r\n+<link\r\n+    rel=\"stylesheet\"\r\n+    href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css\"\r\n+    integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\"\r\n+    crossorigin=\"anonymous\"\r\n+/>\r\n \r\n {{#if wordName}}\r\n     {{#if meanings}}\r\n-    <div class=\"titleContainer\">\r\n-        <h2 class=\"wordName\">{{wordName}}</h2>\r\n-        <audio id=\"audio\" src={{audio}}></audio>\r\n-        <span class=\"glyphicon glyphicon-volume-up playbutton\" onclick=\"playAudio()\"></span>\r\n-    </div>\r\n+        <div class=\"titleContainer\">\r\n+            <h2 class=\"wordName\">{{wordName}}</h2>\r\n+            <audio id=\"audio\" src={{audio}}></audio>\r\n+            <span\r\n+                class=\"glyphicon glyphicon-volume-up playbutton\"\r\n+                onclick=\"playAudio()\"\r\n+            ></span>\r\n+        </div>\r\n \r\n-    <div class=\"buttons\" >\r\n-        <button class=\"btn\" onclick=\"showMeanings()\">Meaning</button>\r\n-        <button class=\"btn\" onclick=\"showSynonyms()\">Synonyms</button>\r\n-        <button class=\"btn\" onclick=\"showAntonyms()\">Antonyms</button>\r\n-    </div>\r\n+        <div class=\"buttons\">\r\n+            <button class=\"btn\" onclick=\"showMeanings()\">Meaning</button>\r\n+            <button class=\"btn\" onclick=\"showSynonyms()\">Synonyms</button>\r\n+            <button class=\"btn\" onclick=\"showAntonyms()\">Antonyms</button>\r\n+        </div>\r\n \r\n         <div class=\"bodyContainer\">\r\n-                {{#each meanings}}\r\n-                    <span><b>{{count}}</b></span><p class=\"meaningParagraph\"> {{this.meaning}}</p><br>\r\n-                            {{#if this.examples}}\r\n-                                <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> \r\n-                                <p class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n-                                {{#else}}\r\n-                                    <br>\r\n-                                {{/else}}\r\n-                            {{/if}}\r\n-                {{/each}}\r\n-            \r\n+            {{#each meanings}}\r\n+                <span><b>{{count}}</b></span><p class=\"meaningParagraph\">\r\n+                    {{this.meaning}}</p><br />\r\n+                {{#if this.examples}}\r\n+                    <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b>\r\n+                    <p class=\"meaningParagraph\">{{this.examples}}</p><br />\r\n+                    {{#else}}\r\n+                        <br />\r\n+                    {{/else}}\r\n+                {{/if}}\r\n+            {{/each}}\r\n+\r\n         </div>\r\n-        {{else}}\r\n-            <div class=\"titleContainer\">\r\n-                <h2 class=\"wordName\">{{wordName}}</h2>\r\n-            </div>\r\n-            <div class=\"bodyContainer\">\r\n-                <p>{{error}}</p>\r\n-            </div>\r\n-        {{/if}}\r\n+    {{else}}\r\n+        <div class=\"titleContainer\">\r\n+            <h2 class=\"wordName\">{{wordName}}</h2>\r\n+        </div>\r\n+        <div class=\"bodyContainer\">\r\n+            <p>{{error}}</p>\r\n+        </div>\r\n+    {{/if}}\r\n {{/if}}\r\n \r\n-\r\n <script>\r\n \r\n-    // These three line can make the first letter of the word to upperCase\r\n-    var toupper = document.querySelector('.wordName').innerHTML;\r\n-    toupper = toupper[0].charAt(0).toUpperCase() + toupper.slice(1);\r\n-    document.querySelector('.wordName').innerHTML = toupper;\r\n-\r\n-    //This was to fix a small bug to reset the counter whenever the \r\n-    //page is refreshed!\r\n+    // These three line can make the first letter of the word to upperCase var\r\n+    toupper = document.querySelector('.wordName').innerHTML; toupper =\r\n+    toupper[0].charAt(0).toUpperCase() + toupper.slice(1);\r\n+    document.querySelector('.wordName').innerHTML = toupper; //This was to fix a\r\n+    small bug to reset the counter whenever the //page is refreshed!\r\n     window.onbeforeunload = function(){\r\n-        {{countReset}}\r\n-    }\r\n+    {{countReset}}\r\n+    } var synonyms = []; var antonyms = []; /* The async function is very\r\n+    Important here and also the await! without this this function is not\r\n+    possible if we dont want to complicate things since the fetch is\r\n+    asynchronous function */ async function loadData(){ var url =\r\n+    `https://api.api-ninjas.com/v1/thesaurus?word=`; const apiKey =\r\n+    \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\" try { const response = await\r\n+    fetch(url + '{{wordName}}', { method: 'GET', headers: { 'X-Api-Key': apiKey,\r\n+    'Accept': 'application/json' } }); const data = await response.json();\r\n+    if(data.synonyms) synonyms = data.synonyms; if(data.antonyms) antonyms =\r\n+    data.antonyms; } catch(error) { //Just for debugging console.error(error); }\r\n+    } function showMeanings(){\r\n+    document.querySelector('.bodyContainer').innerHTML = `\r\n+    {{#each meanings}}\r\n+        <span><b>{{count}}</b></span><p class=\"meaningParagraph\">\r\n+        {{this.meaning}}</p><br>\r\n+        {{#if this.examples}}\r\n+            <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> <p\r\n+            class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n+            {{#else}}\r\n+                <br>\r\n+            {{/else}}\r\n+        {{/if}}\r\n+    {{/each}}\r\n+    ` } async function showSynonyms(){ /* Here we are waiting for fetch from\r\n+    loadData to get the values first and then the rest of code will compile to\r\n+    use the values set by loaddata() */ await loadData(); var html = \"\"; for\r\n+    (var i = 0; i < synonyms.length; i++) { if(i<9) html +=\r\n+    `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">`\r\n+    + synonyms[i] + `</p><br>`; else html +=\r\n+    `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` +\r\n+    synonyms[i] + `</p><br>`; /* //This is second design html += `<span>` +\r\n+    synonyms[i] + `</span>`; if(i != synonyms.length - 1) html += `,` */ } //\r\n+    This is when the array is empty if(synonyms.length === 0) html = `<p>No\r\n+    Antonyms Are Available</p>`\r\n+    document.querySelector('.bodyContainer').innerHTML = `${html}`; } async\r\n+    function showAntonyms(){ await loadData(); var html = \"\"; for (var i = 0; i\r\n+    < antonyms.length; i++) { if(i<9) html +=\r\n+    `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">`\r\n+    + antonyms[i] + `</p><br>`; else html +=\r\n+    `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` +\r\n+    antonyms[i] + `</p><br>`; /* //This is second design html += `<span>` +\r\n+    antonyms[i] + `</span>`; if(i != antonyms.length - 1) html += `,` */ } //\r\n+    This is when the array is empty if(antonyms.length === 0) html = `<p>No\r\n+    Antonyms Are Available</p>`\r\n+    document.querySelector('.bodyContainer').innerHTML = `${html}`; }\r\n \r\n-    var synonyms = [];\r\n-    var antonyms = [];\r\n-\r\n-    /*  The async function is very Important here and also the await!\r\n-        without this this function is not possible if we dont want\r\n-        to complicate things since the fetch is asynchronous function\r\n-    */\r\n-    async function loadData(){    \r\n-        var url = `https://api.api-ninjas.com/v1/thesaurus?word=`;\r\n-        const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\"\r\n-\r\n-        try {\r\n-            const response = await fetch(url + '{{wordName}}', {\r\n-                method: 'GET',\r\n-                headers: {\r\n-                'X-Api-Key': apiKey,\r\n-                'Accept': 'application/json'\r\n-                }\r\n-            });\r\n-            const data = await response.json();\r\n-\r\n-            if(data.synonyms) \r\n-                synonyms = data.synonyms;\r\n-            if(data.antonyms) \r\n-                antonyms = data.antonyms;\r\n-\r\n-        }   catch(error) {\r\n-                //Just for debugging\r\n-                console.error(error);\r\n-            }\r\n-    }\r\n-\r\n-    function showMeanings(){\r\n-        document.querySelector('.bodyContainer').innerHTML = `\r\n-            {{#each meanings}}\r\n-                <span><b>{{count}}</b></span><p class=\"meaningParagraph\"> {{this.meaning}}</p><br>\r\n-                        {{#if this.examples}}\r\n-                        <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> \r\n-                            <p class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n-                        {{#else}}\r\n-                            <br>\r\n-                        {{/else}}\r\n-                        {{/if}}\r\n-            {{/each}}\r\n-        `\r\n-    }\r\n-\r\n-    async  function showSynonyms(){\r\n-        /*\r\n-            Here we are waiting for fetch from loadData\r\n-            to get the values first and then the rest of\r\n-            code will compile to use the values set by loaddata()\r\n-        */\r\n-        await loadData();\r\n-        var html = \"\";\r\n-        for (var i = 0; i < synonyms.length; i++) {\r\n-            if(i<9)\r\n-                html += `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p><br>`;\r\n-            else\r\n-                html += `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p><br>`;\r\n-           /*\r\n-           //This is second design\r\n-            html += `<span>` + synonyms[i] + `</span>`;\r\n-            if(i != synonyms.length - 1) html += `,`\r\n-            */\r\n-        }\r\n-\r\n-        // This is when the array is empty\r\n-        if(synonyms.length === 0) html = `<p>No Antonyms Are Available</p>`\r\n-\r\n-        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n-    }\r\n-   \r\n-   \r\n-    async  function showAntonyms(){\r\n-        await loadData();\r\n-        var html = \"\";\r\n-        for (var i = 0; i < antonyms.length; i++) {\r\n-            if(i<9)\r\n-                html += `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p><br>`;\r\n-            else\r\n-                html += `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p><br>`;\r\n-           /*\r\n-           //This is second design\r\n-            html += `<span>` + antonyms[i] + `</span>`;\r\n-            if(i != antonyms.length - 1) html += `,`\r\n-            */\r\n-        }\r\n-        // This is when the array is empty\r\n-        if(antonyms.length === 0) html = `<p>No Antonyms Are Available</p>`\r\n-\r\n-        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n-    }\r\n-   \r\n-\r\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708811765271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         <h2 class=\"wordName\">{{wordName}}</h2>\r\n         <audio id=\"audio\" src={{audio}}></audio>\r\n         <span class=\"glyphicon glyphicon-volume-up playbutton\" onclick=\"playAudio()\"></span>\r\n     </div>\r\n-\r\n+ \r\n     <div class=\"buttons\" >\r\n         <button class=\"btn\" onclick=\"showMeanings()\">Meaning</button>\r\n         <button class=\"btn\" onclick=\"showSynonyms()\">Synonyms</button>\r\n         <button class=\"btn\" onclick=\"showAntonyms()\">Antonyms</button>\r\n"
                },
                {
                    "date": 1708812270043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css\" \r\n+                  integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\"\r\n+                  crossorigin=\"anonymous\">\r\n+\r\n+{{#if wordName}}\r\n+    {{#if meanings}}\r\n+    <div class=\"titleContainer\">\r\n+        <h2 class=\"wordName\">{{wordName}}</h2>\r\n+        <audio id=\"audio\" src={{audio}}></audio>\r\n+        <span class=\"glyphicon glyphicon-volume-up playbutton\" onclick=\"playAudio()\"></span>\r\n+    </div>\r\n+ \r\n+    <div class=\"buttons\" >\r\n+        <button class=\"btn\" onclick=\"showMeanings()\">Meaning</button>\r\n+        <button class=\"btn\" onclick=\"showSynonyms()\">Synonyms</button>\r\n+        <button class=\"btn\" onclick=\"showAntonyms()\">Antonyms</button>\r\n+    </div>\r\n+\r\n+        <div class=\"bodyContainer\">\r\n+                {{#each meanings}}\r\n+                    <div class=\"meaningContainer\">\r\n+                        <span class=\"count\"><b>{{count}}</b></span><p class=\"meaningParagraph\"> {{this.meaning}}</p><br>\r\n+                    </div>\r\n+                        {{#if this.examples}}\r\n+                            <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> \r\n+                            <p class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n+                            {{#else}}\r\n+                                <br>\r\n+                            {{/else}}\r\n+                        {{/if}}\r\n+                {{/each}}\r\n+            \r\n+        </div>\r\n+        {{else}}\r\n+            <div class=\"titleContainer\">\r\n+                <h2 class=\"wordName\">{{wordName}}</h2>\r\n+            </div>\r\n+            <div class=\"bodyContainer\">\r\n+                <p>{{error}}</p>\r\n+            </div>\r\n+        {{/if}}\r\n+{{/if}}\r\n+\r\n+\r\n+<script>\r\n+\r\n+    // These three line can make the first letter of the word to upperCase\r\n+    var toupper = document.querySelector('.wordName').innerHTML;\r\n+    toupper = toupper[0].charAt(0).toUpperCase() + toupper.slice(1);\r\n+    document.querySelector('.wordName').innerHTML = toupper;\r\n+\r\n+    //This was to fix a small bug to reset the counter whenever the \r\n+    //page is refreshed!\r\n+    window.onbeforeunload = function(){\r\n+        {{countReset}}\r\n+    }\r\n+\r\n+    var synonyms = [];\r\n+    var antonyms = [];\r\n+\r\n+    /*  The async function is very Important here and also the await!\r\n+        without this this function is not possible if we dont want\r\n+        to complicate things since the fetch is asynchronous function\r\n+    */\r\n+    async function loadData(){    \r\n+        var url = `https://api.api-ninjas.com/v1/thesaurus?word=`;\r\n+        const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\"\r\n+\r\n+        try {\r\n+            const response = await fetch(url + '{{wordName}}', {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                'X-Api-Key': apiKey,\r\n+                'Accept': 'application/json'\r\n+                }\r\n+            });\r\n+            const data = await response.json();\r\n+\r\n+            if(data.synonyms) \r\n+                synonyms = data.synonyms;\r\n+            if(data.antonyms) \r\n+                antonyms = data.antonyms;\r\n+\r\n+        }   catch(error) {\r\n+                //Just for debugging\r\n+                console.error(error);\r\n+            }\r\n+    }\r\n+\r\n+    function showMeanings(){\r\n+        document.querySelector('.bodyContainer').innerHTML = `\r\n+            {{#each meanings}}\r\n+                <span><b>{{count}}</b></span><p class=\"meaningParagraph\"> {{this.meaning}}</p><br>\r\n+                        {{#if this.examples}}\r\n+                        <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> \r\n+                            <p class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n+                        {{#else}}\r\n+                            <br>\r\n+                        {{/else}}\r\n+                        {{/if}}\r\n+            {{/each}}\r\n+        `\r\n+    }\r\n+\r\n+    async  function showSynonyms(){\r\n+        /*\r\n+            Here we are waiting for fetch from loadData\r\n+            to get the values first and then the rest of\r\n+            code will compile to use the values set by loaddata()\r\n+        */\r\n+        await loadData();\r\n+        var html = \"\";\r\n+        for (var i = 0; i < synonyms.length; i++) {\r\n+            if(i<9)\r\n+                html += `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p><br>`;\r\n+            else\r\n+                html += `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p><br>`;\r\n+           /*\r\n+           //This is second design\r\n+            html += `<span>` + synonyms[i] + `</span>`;\r\n+            if(i != synonyms.length - 1) html += `,`\r\n+            */\r\n+        }\r\n+\r\n+        // This is when the array is empty\r\n+        if(synonyms.length === 0) html = `<p>No Antonyms Are Available</p>`\r\n+\r\n+        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n+    }\r\n+   \r\n+   \r\n+    async  function showAntonyms(){\r\n+        await loadData();\r\n+        var html = \"\";\r\n+        for (var i = 0; i < antonyms.length; i++) {\r\n+            if(i<9)\r\n+                html += `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p><br>`;\r\n+            else\r\n+                html += `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p><br>`;\r\n+           /*\r\n+           //This is second design\r\n+            html += `<span>` + antonyms[i] + `</span>`;\r\n+            if(i != antonyms.length - 1) html += `,`\r\n+            */\r\n+        }\r\n+        // This is when the array is empty\r\n+        if(antonyms.length === 0) html = `<p>No Antonyms Are Available</p>`\r\n+\r\n+        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n+    }\r\n+   \r\n+\r\n+</script>\n\\ No newline at end of file\n"
                }
            ],
            "date": 1708811521126,
            "name": "Commit-0",
            "content": "<link\r\n    rel=\"stylesheet\"\r\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css\"\r\n    integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\"\r\n    crossorigin=\"anonymous\"\r\n/>\r\n\r\n{{#if wordName}}\r\n    {{#if meanings}}\r\n        <div class=\"titleContainer\">\r\n            <h2 class=\"wordName\">{{wordName}}</h2>\r\n            <audio id=\"audio\" src={{audio}}></audio>\r\n            <span\r\n                class=\"glyphicon glyphicon-volume-up playbutton\"\r\n                onclick=\"playAudio()\"\r\n            ></span>\r\n        </div>\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn\" onclick=\"showMeanings()\">Meaning</button>\r\n            <button class=\"btn\" onclick=\"showSynonyms()\">Synonyms</button>\r\n            <button class=\"btn\" onclick=\"showAntonyms()\">Antonyms</button>\r\n        </div>\r\n\r\n        <div class=\"bodyContainer\">\r\n            {{#each meanings}}\r\n                <span><b>{{count}}</b></span><p class=\"meaningParagraph\">\r\n                    {{this.meaning}}</p><br />\r\n                {{#if this.examples}}\r\n                    <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b>\r\n                    <p class=\"meaningParagraph\">{{this.examples}}</p><br />\r\n                    {{#else}}\r\n                        <br />\r\n                    {{/else}}\r\n                {{/if}}\r\n            {{/each}}\r\n\r\n        </div>\r\n    {{else}}\r\n        <div class=\"titleContainer\">\r\n            <h2 class=\"wordName\">{{wordName}}</h2>\r\n        </div>\r\n        <div class=\"bodyContainer\">\r\n            <p>{{error}}</p>\r\n        </div>\r\n    {{/if}}\r\n{{/if}}\r\n\r\n<script>\r\n\r\n    // These three line can make the first letter of the word to upperCase var\r\n    toupper = document.querySelector('.wordName').innerHTML; toupper =\r\n    toupper[0].charAt(0).toUpperCase() + toupper.slice(1);\r\n    document.querySelector('.wordName').innerHTML = toupper; //This was to fix a\r\n    small bug to reset the counter whenever the //page is refreshed!\r\n    window.onbeforeunload = function(){\r\n    {{countReset}}\r\n    } var synonyms = []; var antonyms = []; /* The async function is very\r\n    Important here and also the await! without this this function is not\r\n    possible if we dont want to complicate things since the fetch is\r\n    asynchronous function */ async function loadData(){ var url =\r\n    `https://api.api-ninjas.com/v1/thesaurus?word=`; const apiKey =\r\n    \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\" try { const response = await\r\n    fetch(url + '{{wordName}}', { method: 'GET', headers: { 'X-Api-Key': apiKey,\r\n    'Accept': 'application/json' } }); const data = await response.json();\r\n    if(data.synonyms) synonyms = data.synonyms; if(data.antonyms) antonyms =\r\n    data.antonyms; } catch(error) { //Just for debugging console.error(error); }\r\n    } function showMeanings(){\r\n    document.querySelector('.bodyContainer').innerHTML = `\r\n    {{#each meanings}}\r\n        <span><b>{{count}}</b></span><p class=\"meaningParagraph\">\r\n        {{this.meaning}}</p><br>\r\n        {{#if this.examples}}\r\n            <b><span>&nbsp;&nbsp;&nbsp;Eg.</span></b> <p\r\n            class=\"meaningParagraph\">{{this.examples}}</p><br>\r\n            {{#else}}\r\n                <br>\r\n            {{/else}}\r\n        {{/if}}\r\n    {{/each}}\r\n    ` } async function showSynonyms(){ /* Here we are waiting for fetch from\r\n    loadData to get the values first and then the rest of code will compile to\r\n    use the values set by loaddata() */ await loadData(); var html = \"\"; for\r\n    (var i = 0; i < synonyms.length; i++) { if(i<9) html +=\r\n    `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">`\r\n    + synonyms[i] + `</p><br>`; else html +=\r\n    `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` +\r\n    synonyms[i] + `</p><br>`; /* //This is second design html += `<span>` +\r\n    synonyms[i] + `</span>`; if(i != synonyms.length - 1) html += `,` */ } //\r\n    This is when the array is empty if(synonyms.length === 0) html = `<p>No\r\n    Antonyms Are Available</p>`\r\n    document.querySelector('.bodyContainer').innerHTML = `${html}`; } async\r\n    function showAntonyms(){ await loadData(); var html = \"\"; for (var i = 0; i\r\n    < antonyms.length; i++) { if(i<9) html +=\r\n    `<span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">`\r\n    + antonyms[i] + `</p><br>`; else html +=\r\n    `<span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` +\r\n    antonyms[i] + `</p><br>`; /* //This is second design html += `<span>` +\r\n    antonyms[i] + `</span>`; if(i != antonyms.length - 1) html += `,` */ } //\r\n    This is when the array is empty if(antonyms.length === 0) html = `<p>No\r\n    Antonyms Are Available</p>`\r\n    document.querySelector('.bodyContainer').innerHTML = `${html}`; }\r\n\r\n</script>"
        }
    ]
}
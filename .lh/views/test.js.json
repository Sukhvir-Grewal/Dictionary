{
    "sourceFile": "views/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1708819729405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1708819729405,
            "name": "Commit-0",
            "content": "    // These three line can make the first letter of the word to upperCase\r\n    var toUpper = document.querySelector('.wordName').innerHTML;\r\n    toUpper = toUpper[0].charAt(0).toUpperCase() + toUpper.slice(1);\r\n    document.querySelector('.wordName').innerHTML = toUpper;\r\n\r\n    //This was to fix a small bug to reset the counter whenever the \r\n    //page is refreshed!\r\n    window.onbeforeunload = function(){\r\n        {{countReset}}\r\n    }\r\n\r\n    var synonyms = [];\r\n    var antonyms = [];\r\n\r\n    /*  The async function is very Important here and also the await!\r\n        without this  function is not possible if we dont want\r\n        to complicate things since the fetch is asynchronous function\r\n    */\r\n    async function loadData(){    \r\n        var url = `https://api.api-ninjas.com/v1/thesaurus?word=`;\r\n        const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\"\r\n\r\n        try {\r\n            const response = await fetch(url + '{{wordName}}', {\r\n                method: 'GET',\r\n                headers: {\r\n                'X-Api-Key': apiKey,\r\n                'Accept': 'application/json'\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            if(data.synonyms) \r\n                synonyms = data.synonyms;\r\n            if(data.antonyms) \r\n                antonyms = data.antonyms;\r\n\r\n        }   catch(error) {\r\n                //Just for debugging\r\n                console.error(error);\r\n            }\r\n    }\r\n\r\n    function showMeanings(){\r\n        document.querySelector('.bodyContainer').innerHTML = `\r\n                {{#each meanings}}\r\n                    <div class=\"meaningContainer\">\r\n                        <span class=\"count\"><b>{{count}}&nbsp;&nbsp;</b></span><p class=\"meaningParagraph\"> {{this.meaning}}</p><br>\r\n                    </div>\r\n                    <div class=\"meaningParagraph\">\r\n                        {{#if this.examples}}\r\n                            <b><span class=\"eg\">Eg.</span></b> \r\n                            <p>{{this.examples}}</p><br>\r\n                            {{#else}}\r\n                                <br>\r\n                            {{/else}}\r\n                        {{/if}}\r\n                    </div>\r\n                {{/each}}\r\n        `\r\n    }\r\n\r\n    async  function showSynonyms(){\r\n        /*\r\n            Here we are waiting for fetch from loadData\r\n            to get the values first and then the rest of\r\n            code will compile to use the values set by loaddata()\r\n        */\r\n        await loadData();\r\n        var html = \"\";\r\n        for (var i = 0; i < synonyms.length; i++) {\r\n            if(synonyms[i] !== '')\r\n                if(i<9)\r\n                    html += `<div class=\"meaningContainer\"><span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p></div>`;\r\n                else\r\n                    html += `<div class=\"meaningContainer\"><span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + synonyms[i] + `</p></div>`;\r\n           /*\r\n           //This is second design\r\n            html += `<span>` + synonyms[i] + `</span>`;\r\n            if(i != synonyms.length - 1) html += `,`\r\n            */\r\n        }\r\n\r\n        // This is when the array is empty\r\n        if(synonyms.length === 0 || html === '') html = `<p>No Synonyms Are Available</p>`\r\n\r\n        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n    }\r\n   \r\n   \r\n    async  function showAntonyms(){\r\n        await loadData();\r\n        var html = \"\";\r\n        for (var i = 0; i < antonyms.length; i++) {\r\n            if(antonyms[i] !== '')\r\n                if(i<9)\r\n                    html += `<div class=\"meaningContainer\"><span><b>${i+1}.&nbsp;&nbsp;&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p></div>`;\r\n                else\r\n                    html += `<div class=\"meaningContainer\"><span><b>${i+1}.&nbsp;</b></span><p class= \"meaningParagraph\">` + antonyms[i] + `</p></div>`;\r\n           /*\r\n           //This is second design\r\n            html += `<span>` + antonyms[i] + `</span>`;\r\n            if(i != antonyms.length - 1) html += `,`\r\n            */\r\n        }\r\n        // This is when the array is empty\r\n        if(antonyms.length === 0 || html === '') html = `<p>No Antonyms Are Available</p>`\r\n\r\n        document.querySelector('.bodyContainer').innerHTML = `${html}`;\r\n    }"
        }
    ]
}
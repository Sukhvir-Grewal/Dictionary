{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1708811880966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708816589339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        console.log('Meanings of', json[0].word)\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+            console.log(json[0]);\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816599676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+            console.log(json[0]);\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816608661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+            console.log(json[0]);\r\n+            console.log(json[0]);\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816656993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            console.log(json[0].meanings[0].definitions[i].antonyms)\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816712816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            console.log(json[0].meanings[0].definitions[i])\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816751595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            console.log(json[0].meanings[0])\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816795797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            console.log(json[0])\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816866916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            console.log(json[0].mea)\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816872955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,240 +72,8 @@\n                 synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n                 antonyms: json[0].meanings[0].definitions[i].antonyms\r\n             });\r\n             \r\n-            console.log(json[0].mea)\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            console.log(json[0])\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n             console.log(json[0].meanings[0])\r\n         }\r\n         res.render('meaning', { \r\n             meanings: meanings,\r\n@@ -344,709 +112,5 @@\n        .then(array => {\r\n              synonyms = array.synonyms;\r\n              antonyms = array.antonyms;\r\n          });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            console.log(json[0].meanings[0].definitions[i])\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            console.log(json[0].meanings[0].definitions[i].antonyms)\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-            console.log(json[0]);\r\n-            console.log(json[0]);\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-            console.log(json[0]);\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        console.log('Meanings of', json[0].word)\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-            console.log(json[0]);\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs'\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    console.log(url + data.search);\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        console.log('Meanings of', json[0].word)\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-            console.log(json[0]);\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708816886349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+            console.log(json[0].meanings[0].s)\r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708817449928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers:{\r\n+        count: function(){\r\n+            return ++counter + '. ';\r\n+        },\r\n+        countReset: function(){\r\n+            counter = 0;\r\n+        },\r\n+        space: function(){\r\n+            return ' '\r\n+        }\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708817729004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+helpers: {\r\n+    count: () => `${++counter}. `,\r\n+    countReset: () => { counter = 0; },\r\n+    space: () => ' '\r\n+}\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708817736389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,13 @@\n const Http_port = 8080;\r\n let counter = 0;\r\n //Setting up the handleBars for the views folder\r\n app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-helpers: {\r\n-    count: () => `${++counter}. `,\r\n-    countReset: () => { counter = 0; },\r\n-    space: () => ' '\r\n-}\r\n+    helpers: {\r\n+        count: () => `${++counter}. `,\r\n+        countReset: () => { counter = 0; },\r\n+        space: () => ' '\r\n+    }\r\n }));\r\n app.set('view engine', '.hbs');\r\n \r\n //This is main url for the api to search the word for their meaning\r\n"
                },
                {
                    "date": 1708817750320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers: {\r\n+        count: () => `${++counter}. `,\r\n+        countReset: () => { counter = 0; },\r\n+        space: () => ' '\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\",as (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        // console.log(json[0].meanings[0]);\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708817788914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers: {\r\n+        count: () => `${++counter}. `,\r\n+        countReset: () => { counter = 0; },\r\n+        space: () => ' '\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\",async (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n+\r\n+\r\n+\r\n+/*\r\n+  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n+     var synonyms = [];\r\n+     var antonyms = [];\r\n+     fetch(url, {\r\n+         method: 'GET',\r\n+         headers: {\r\n+           'X-Api-Key': apiKey,\r\n+           'Accept': 'application/json'\r\n+         }\r\n+       })\r\n+       .then(response => response.json())\r\n+       .then(array => {\r\n+             synonyms = array.synonyms;\r\n+             antonyms = array.antonyms;\r\n+         });\r\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708817822008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers: {\r\n+        count: () => `${++counter}. `,\r\n+        countReset: () => { counter = 0; },\r\n+        space: () => ' '\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\",async (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n+            meanings.push({\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+            });\r\n+            \r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708817883969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers: {\r\n+        count: () => `${++counter}. `,\r\n+        countReset: () => { counter = 0; },\r\n+        space: () => ' '\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static('public'));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render('meaning');\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\",async (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n+                audio = json[0].phonetics[i].audio;\r\n+        }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n+\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n+        const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n+\r\n+        meanings.push({\r\n+            meaning,\r\n+            examples: example,\r\n+            synonyms,\r\n+            antonyms\r\n+        });\r\n+            \r\n+        }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n+\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708818034386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== '') {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms\r\n+            });\r\n+        }\r\n+\r\n+        res.render('meaning', { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render('meaning', {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708818041825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    \r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== '') {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms\r\n+            });\r\n+        }\r\n+\r\n+        res.render('meaning', { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render('meaning', {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708818059616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== '') {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms\r\n+            });\r\n+        }\r\n+\r\n+        res.render('meaning', { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render('meaning', {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708818068174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        //testing looping through all the meanings\r\n+            //Logic to search the audio in the phonetics array\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== '') {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms\r\n+            });\r\n+        }\r\n+\r\n+        res.render('meaning', { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render('meaning', {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708818078259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== '') {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        \r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms\r\n+            });\r\n+        }\r\n+\r\n+        res.render('meaning', { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render('meaning', {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708818084162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== '') {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        //we will use this regular expression\r\n+        //to erase all the word inside () in the starting\r\n+        //of the word's meaning like (noun )\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms\r\n+            });\r\n+        }\r\n+\r\n+        res.render('meaning', { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render('meaning', {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708818091340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== \"\") {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const { definition, example, synonyms, antonyms } =\r\n+                json[0].meanings[0].definitions[i];\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms,\r\n+            });\r\n+        }\r\n+\r\n+        res.render(\"meaning\", { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render(\"meaning\", {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`,\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708818099575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== \"\") {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } =\r\n+            json[0].meanings[0].definitions[i];\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun )\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n+\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms,\r\n+            });\r\n+        }\r\n+\r\n+        res.render(\"meaning\", { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render(\"meaning\", {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`,\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708819015819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n+\r\n+        //testing looping through all the meanings\r\n+        //Logic to search the audio in the phonetics array\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== \"\") {\r\n+                audio = json[0].phonetics[i].audio;\r\n+            }\r\n+        }\r\n+\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+            const { definition, example, synonyms, antonyms } =\r\n+            json[0].meanings[0].definitions[i];\r\n+            //we will use this regular expression\r\n+            //to erase all the word inside () in the starting\r\n+            //of the word's meaning like (noun)\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n+            console.log(ex)\r\n+            meanings.push({\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms,\r\n+            });\r\n+        }\r\n+\r\n+        res.render(\"meaning\", { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render(\"meaning\", {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`,\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708819034206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n+const app = express();\r\n+\r\n+//Using this port for testing\r\n+const Http_port = 8080;\r\n+let counter = 0;\r\n+//Setting up the handleBars for the views folder\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n+\r\n+//This is main url for the api to search the word for their meaning\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+\r\n+//This will make us able to work with form data\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n+//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n+app.use(express.static(\"public\"));\r\n+\r\n+//Main page route\r\n+app.get(\"/\", (req, res) => {\r\n+    res.render(\"meaning\");\r\n+});\r\n+\r\n+//Main page Logic\r\n+app.post(\"/\", async (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it\r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n+\r\n+    fetch(url + data.search)\r\n+        .then((response) => response.json())\r\n+        .then((json) => {\r\n+            //testing looping through all the meanings\r\n+            //Logic to search the audio in the phonetics array\r\n+            for (var i = 0; i < json[0].phonetics.length; i++) {\r\n+                if (json[0].phonetics[i].audio != \"\")\r\n+                    audio = json[0].phonetics[i].audio;\r\n+            }\r\n+            // This will held the Name of the word people are serching\r\n+            wordName = json[0].word;\r\n+\r\n+            for (var i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n+                //we will use this regular expression\r\n+                //to erase all the word inside () in the starting\r\n+                //of the word's meaning like (noun )\r\n+                const { definition, example, synonyms, antonyms } =\r\n+                    json[0].meanings[0].definitions[i];\r\n+                const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n+\r\n+                meanings.push({\r\n+                    meaning,\r\n+                    examples: example,\r\n+                    synonyms,\r\n+                    antonyms,\r\n+                });\r\n+            }\r\n+            res.render(\"meaning\", {\r\n+                meanings: meanings,\r\n+                audio: audio,\r\n+                wordName: wordName,\r\n+            });\r\n+        })\r\n+        .catch((err) => {\r\n+            res.render(\"meaning\", {\r\n+                wordName: data.search,\r\n+                meanings: null,\r\n+                error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`,\r\n+            });\r\n+        });\r\n+});\r\n+\r\n+//Starting Server\r\n+app.listen(Http_port, () => {\r\n+    console.log(`Server running on port ${Http_port}`);\r\n+});\r\n"
                },
                {
                    "date": 1708819048297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,100 +37,8 @@\n });\r\n \r\n //Main page Logic\r\n app.post(\"/\", async (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it\r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url + data.search)\r\n-        .then((response) => response.json())\r\n-        .then((json) => {\r\n-            //testing looping through all the meanings\r\n-            //Logic to search the audio in the phonetics array\r\n-            for (var i = 0; i < json[0].phonetics.length; i++) {\r\n-                if (json[0].phonetics[i].audio != \"\")\r\n-                    audio = json[0].phonetics[i].audio;\r\n-            }\r\n-            // This will held the Name of the word people are serching\r\n-            wordName = json[0].word;\r\n-\r\n-            for (var i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-                //we will use this regular expression\r\n-                //to erase all the word inside () in the starting\r\n-                //of the word's meaning like (noun )\r\n-                const { definition, example, synonyms, antonyms } =\r\n-                    json[0].meanings[0].definitions[i];\r\n-                const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n-\r\n-                meanings.push({\r\n-                    meaning,\r\n-                    examples: example,\r\n-                    synonyms,\r\n-                    antonyms,\r\n-                });\r\n-            }\r\n-            res.render(\"meaning\", {\r\n-                meanings: meanings,\r\n-                audio: audio,\r\n-                wordName: wordName,\r\n-            });\r\n-        })\r\n-        .catch((err) => {\r\n-            res.render(\"meaning\", {\r\n-                wordName: data.search,\r\n-                meanings: null,\r\n-                error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`,\r\n-            });\r\n-        });\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n     try {\r\n         const { search } = req.body;\r\n         const response = await fetch(url + search);\r\n         const json = await response.json();\r\n@@ -155,9 +63,9 @@\n             //we will use this regular expression\r\n             //to erase all the word inside () in the starting\r\n             //of the word's meaning like (noun)\r\n             const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n-            console.log(ex)\r\n+            console.log(example)\r\n             meanings.push({\r\n                 meaning,\r\n                 examples: example,\r\n                 synonyms,\r\n@@ -178,1540 +86,4 @@\n //Starting Server\r\n app.listen(Http_port, () => {\r\n     console.log(`Server running on port ${Http_port}`);\r\n });\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        //This array will hold the meaning, examples of the word and will pass it\r\n-        //to meaning.hbs to print on page\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== \"\") {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } =\r\n-            json[0].meanings[0].definitions[i];\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms,\r\n-            });\r\n-        }\r\n-\r\n-        res.render(\"meaning\", { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render(\"meaning\", {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`,\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        //This array will hold the meaning, examples of the word and will pass it\r\n-        //to meaning.hbs to print on page\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== \"\") {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const { definition, example, synonyms, antonyms } =\r\n-                json[0].meanings[0].definitions[i];\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms,\r\n-            });\r\n-        }\r\n-\r\n-        res.render(\"meaning\", { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render(\"meaning\", {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`,\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        //This array will hold the meaning, examples of the word and will pass it\r\n-        //to meaning.hbs to print on page\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== '') {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        //we will use this regular expression\r\n-        //to erase all the word inside () in the starting\r\n-        //of the word's meaning like (noun )\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms\r\n-            });\r\n-        }\r\n-\r\n-        res.render('meaning', { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render('meaning', {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        //This array will hold the meaning, examples of the word and will pass it\r\n-        //to meaning.hbs to print on page\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== '') {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        \r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms\r\n-            });\r\n-        }\r\n-\r\n-        res.render('meaning', { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render('meaning', {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        //This array will hold the meaning, examples of the word and will pass it\r\n-        //to meaning.hbs to print on page\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        //testing looping through all the meanings\r\n-            //Logic to search the audio in the phonetics array\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== '') {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms\r\n-            });\r\n-        }\r\n-\r\n-        res.render('meaning', { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render('meaning', {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        //This array will hold the meaning, examples of the word and will pass it\r\n-        //to meaning.hbs to print on page\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== '') {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms\r\n-            });\r\n-        }\r\n-\r\n-        res.render('meaning', { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render('meaning', {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    \r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== '') {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms\r\n-            });\r\n-        }\r\n-\r\n-        res.render('meaning', { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render('meaning', {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        const meanings = [];\r\n-        let audio;\r\n-\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== '') {\r\n-                audio = json[0].phonetics[i].audio;\r\n-            }\r\n-        }\r\n-\r\n-        const wordName = json[0].word;\r\n-\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n-\r\n-            meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms\r\n-            });\r\n-        }\r\n-\r\n-        res.render('meaning', { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render('meaning', {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers: {\r\n-        count: () => `${++counter}. `,\r\n-        countReset: () => { counter = 0; },\r\n-        space: () => ' '\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\",async (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const { definition, example, synonyms, antonyms } = json[0].meanings[0].definitions[i];\r\n-        const meaning = definition.replace(/\\([^)]*\\)/g, '').trim();\r\n-\r\n-        meanings.push({\r\n-            meaning,\r\n-            examples: example,\r\n-            synonyms,\r\n-            antonyms\r\n-        });\r\n-            \r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers: {\r\n-        count: () => `${++counter}. `,\r\n-        countReset: () => { counter = 0; },\r\n-        space: () => ' '\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\",async (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers: {\r\n-        count: () => `${++counter}. `,\r\n-        countReset: () => { counter = 0; },\r\n-        space: () => ' '\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\",async (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers: {\r\n-        count: () => `${++counter}. `,\r\n-        countReset: () => { counter = 0; },\r\n-        space: () => ' '\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\",as (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers: {\r\n-        count: () => `${++counter}. `,\r\n-        countReset: () => { counter = 0; },\r\n-        space: () => ' '\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            console.log(json[0].meanings[0].s)\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n-const app = express();\r\n-\r\n-//Using this port for testing\r\n-const Http_port = 8080;\r\n-let counter = 0;\r\n-//Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers:{\r\n-        count: function(){\r\n-            return ++counter + '. ';\r\n-        },\r\n-        countReset: function(){\r\n-            counter = 0;\r\n-        },\r\n-        space: function(){\r\n-            return ' '\r\n-        }\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n-\r\n-//This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n-\r\n-//This will make us able to work with form data\r\n-app.use(bodyParser.urlencoded({ extended: false }));\r\n-app.use(bodyParser.json());\r\n-//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n-\r\n-//Main page route\r\n-app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n-});\r\n-\r\n-//Main page Logic\r\n-app.post(\"/\", (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n-\r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n-        // console.log(json[0].meanings[0]);\r\n-        //testing looping through all the meanings\r\n-        //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n-                audio = json[0].phonetics[i].audio;\r\n-        }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n-\r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n-            //we will use this regular expression\r\n-            //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n-            meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n-            });\r\n-            \r\n-            console.log(json[0].meanings[0])\r\n-        }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n-        });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n-});\r\n-\r\n-//Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n-\r\n-\r\n-\r\n-/*\r\n-  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n-     var synonyms = [];\r\n-     var antonyms = [];\r\n-     fetch(url, {\r\n-         method: 'GET',\r\n-         headers: {\r\n-           'X-Api-Key': apiKey,\r\n-           'Accept': 'application/json'\r\n-         }\r\n-       })\r\n-       .then(response => response.json())\r\n-       .then(array => {\r\n-             synonyms = array.synonyms;\r\n-             antonyms = array.antonyms;\r\n-         });\r\n-*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708819054224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,89 +1,88 @@\n-const express = require(\"express\");\r\n-const bodyParser = require(\"body-parser\");\r\n-const exphbs = require(\"express-handlebars\");\r\n+const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const exphbs = require('express-handlebars');\r\n const app = express();\r\n \r\n //Using this port for testing\r\n const Http_port = 8080;\r\n let counter = 0;\r\n //Setting up the handleBars for the views folder\r\n-app.engine(\r\n-    \".hbs\",\r\n-    exphbs.engine({\r\n-        extname: \"hbs\",\r\n-        helpers: {\r\n-            count: () => `${++counter}. `,\r\n-            countReset: () => {\r\n-                counter = 0;\r\n-            },\r\n-            space: () => \" \",\r\n-        },\r\n-    })\r\n-);\r\n-app.set(\"view engine\", \".hbs\");\r\n+app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n+    helpers: {\r\n+        count: () => `${++counter}. `,\r\n+        countReset: () => { counter = 0; },\r\n+        space: () => ' '\r\n+    }\r\n+}));\r\n+app.set('view engine', '.hbs');\r\n \r\n //This is main url for the api to search the word for their meaning\r\n-const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n+const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n \r\n //This will make us able to work with form data\r\n app.use(bodyParser.urlencoded({ extended: false }));\r\n app.use(bodyParser.json());\r\n //This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static(\"public\"));\r\n+app.use(express.static('public'));\r\n \r\n //Main page route\r\n app.get(\"/\", (req, res) => {\r\n-    res.render(\"meaning\");\r\n+    res.render('meaning');\r\n });\r\n \r\n //Main page Logic\r\n-app.post(\"/\", async (req, res) => {\r\n-    try {\r\n-        const { search } = req.body;\r\n-        const response = await fetch(url + search);\r\n-        const json = await response.json();\r\n-        //This array will hold the meaning, examples of the word and will pass it\r\n-        //to meaning.hbs to print on page\r\n-        const meanings = [];\r\n-        let audio;\r\n+app.post(\"/\",async (req, res) => {\r\n+    //This array will hold the meaning, examples of the word and will pass it \r\n+    //to meaning.hbs to print on page\r\n+    var meanings = [];\r\n+    var data = req.body;\r\n+    var audio;\r\n \r\n+    fetch(url+data.search)\r\n+    .then(response=>response.json())\r\n+    .then(json=> {\r\n         //testing looping through all the meanings\r\n         //Logic to search the audio in the phonetics array\r\n-        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n-            if (json[0].phonetics[i].audio !== \"\") {\r\n+        for(var i = 0; i < json[0].phonetics.length; i++){\r\n+            if(json[0].phonetics[i].audio != '')\r\n                 audio = json[0].phonetics[i].audio;\r\n-            }\r\n         }\r\n+        // This will held the Name of the word people are serching\r\n+        wordName = json[0].word;\r\n \r\n-        const wordName = json[0].word;\r\n-\r\n-        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n-            const { definition, example, synonyms, antonyms } =\r\n-            json[0].meanings[0].definitions[i];\r\n+        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n             //we will use this regular expression\r\n             //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun)\r\n-            const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n-            console.log(example)\r\n+            //of the word's meaning like (noun )\r\n+            const regex = /\\([^)]*\\)/g;\r\n+            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n+            var meaning = readyToReplace.replace(regex, '');\r\n+            // console.log(i+1 , meaning.trim());\r\n+\r\n             meanings.push({\r\n-                meaning,\r\n-                examples: example,\r\n-                synonyms,\r\n-                antonyms,\r\n+                meaning: meaning.trim(),\r\n+                examples: json[0].meanings[0].definitions[i].example,\r\n+                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n+                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n             });\r\n+            \r\n         }\r\n+        res.render('meaning', { \r\n+            meanings: meanings,\r\n+            audio: audio,\r\n+            wordName: wordName\r\n+        });\r\n+    }).catch(err=>{\r\n+        res.render('meaning', {\r\n+            wordName: data.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n+        })\r\n+    })\r\n \r\n-        res.render(\"meaning\", { meanings, audio, wordName });\r\n-    } catch (err) {\r\n-        res.render(\"meaning\", {\r\n-            wordName: req.body.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`,\r\n-        });\r\n-    }\r\n });\r\n \r\n //Starting Server\r\n app.listen(Http_port, () => {\r\n     console.log(`Server running on port ${Http_port}`);\r\n-});\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708819071575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +1,89 @@\n-const express = require('express');\r\n-const bodyParser = require('body-parser');\r\n-const exphbs = require('express-handlebars');\r\n+const express = require(\"express\");\r\n+const bodyParser = require(\"body-parser\");\r\n+const exphbs = require(\"express-handlebars\");\r\n const app = express();\r\n \r\n //Using this port for testing\r\n const Http_port = 8080;\r\n let counter = 0;\r\n //Setting up the handleBars for the views folder\r\n-app.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n-    helpers: {\r\n-        count: () => `${++counter}. `,\r\n-        countReset: () => { counter = 0; },\r\n-        space: () => ' '\r\n-    }\r\n-}));\r\n-app.set('view engine', '.hbs');\r\n+app.engine(\r\n+    \".hbs\",\r\n+    exphbs.engine({\r\n+        extname: \"hbs\",\r\n+        helpers: {\r\n+            count: () => `${++counter}. `,\r\n+            countReset: () => {\r\n+                counter = 0;\r\n+            },\r\n+            space: () => \" \",\r\n+        },\r\n+    })\r\n+);\r\n+app.set(\"view engine\", \".hbs\");\r\n \r\n //This is main url for the api to search the word for their meaning\r\n-const url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n+const url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n \r\n //This will make us able to work with form data\r\n app.use(bodyParser.urlencoded({ extended: false }));\r\n app.use(bodyParser.json());\r\n //This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\n-app.use(express.static('public'));\r\n+app.use(express.static(\"public\"));\r\n \r\n //Main page route\r\n app.get(\"/\", (req, res) => {\r\n-    res.render('meaning');\r\n+    res.render(\"meaning\");\r\n });\r\n \r\n //Main page Logic\r\n-app.post(\"/\",async (req, res) => {\r\n-    //This array will hold the meaning, examples of the word and will pass it \r\n-    //to meaning.hbs to print on page\r\n-    var meanings = [];\r\n-    var data = req.body;\r\n-    var audio;\r\n+app.post(\"/\", async (req, res) => {\r\n+    try {\r\n+        const { search } = req.body;\r\n+        const response = await fetch(url + search);\r\n+        const json = await response.json();\r\n+        //This array will hold the meaning, examples of the word and will pass it\r\n+        //to meaning.hbs to print on page\r\n+        const meanings = [];\r\n+        let audio;\r\n \r\n-    fetch(url+data.search)\r\n-    .then(response=>response.json())\r\n-    .then(json=> {\r\n         //testing looping through all the meanings\r\n         //Logic to search the audio in the phonetics array\r\n-        for(var i = 0; i < json[0].phonetics.length; i++){\r\n-            if(json[0].phonetics[i].audio != '')\r\n+        for (let i = 0; i < json[0].phonetics.length; i++) {\r\n+            if (json[0].phonetics[i].audio !== \"\") {\r\n                 audio = json[0].phonetics[i].audio;\r\n+            }\r\n         }\r\n-        // This will held the Name of the word people are serching\r\n-        wordName = json[0].word;\r\n \r\n-        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n+        const wordName = json[0].word;\r\n+\r\n+        for (let i = 0; i < json[0].meanings[0].definitions.length; i++) {\r\n\\ No newline at end of file\n+            const { definition, example, synonyms, antonyms } =\r\n+            json[0].meanings[0].definitions[i];\r\n             //we will use this regular expression\r\n             //to erase all the word inside () in the starting\r\n-            //of the word's meaning like (noun )\r\n-            const regex = /\\([^)]*\\)/g;\r\n-            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n-            var meaning = readyToReplace.replace(regex, '');\r\n-            // console.log(i+1 , meaning.trim());\r\n-\r\n+            //of the word's meaning like (noun)\r\n+            const meaning = definition.replace(/\\([^)]*\\)/g, \"\").trim();\r\n+            console.log(example)\r\n             meanings.push({\r\n-                meaning: meaning.trim(),\r\n-                examples: json[0].meanings[0].definitions[i].example,\r\n-                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n-                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n+                meaning,\r\n+                examples: example,\r\n+                synonyms,\r\n+                antonyms,\r\n             });\r\n-            \r\n         }\r\n-        res.render('meaning', { \r\n-            meanings: meanings,\r\n-            audio: audio,\r\n-            wordName: wordName\r\n+\r\n+        res.render(\"meaning\", { meanings, audio, wordName });\r\n+    } catch (err) {\r\n+        res.render(\"meaning\", {\r\n+            wordName: req.body.search,\r\n+            meanings: null,\r\n+            error: `Sorry, we could not find the meaning of ${req.body.search}. Please try again!`,\r\n         });\r\n-    }).catch(err=>{\r\n-        res.render('meaning', {\r\n-            wordName: data.search,\r\n-            meanings: null,\r\n-            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n-        })\r\n-    })\r\n-\r\n+    }\r\n });\r\n \r\n //Starting Server\r\n app.listen(Http_port, () => {\r\n     console.log(`Server running on port ${Http_port}`);\r\n-});\n+});\r\n"
                },
                {
                    "date": 1708885632791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,5 +85,7 @@\n \r\n //Starting Server\r\n app.listen(Http_port, () => {\r\n     console.log(`Server running on port ${Http_port}`);\r\n-});\n\\ No newline at end of file\n+});\r\n+\r\n+\r\n"
                },
                {
                    "date": 1708885709214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     }\r\n });\r\n \r\n //Starting Server\r\n-app.listen(Http_port, () => {\r\n-    console.log(`Server running on port ${Http_port}`);\r\n-});\r\n+// app.listen(Http_port, () => {\r\n+//     console.log(`Server running on port ${Http_port}`);\r\n+// });\r\n \r\n \r\n"
                },
                {
                    "date": 1708885715365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,5 +87,5 @@\n // app.listen(Http_port, () => {\r\n //     console.log(`Server running on port ${Http_port}`);\r\n // });\r\n \r\n-\r\n+module.exports = app;\r\n"
                }
            ],
            "date": 1708811880966,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst exphbs = require('express-handlebars');\r\nconst app = express();\r\n\r\n//Using this port for testing\r\nconst Http_port = 8080;\r\nlet counter = 0;\r\n//Setting up the handleBars for the views folder\r\napp.engine('.hbs', exphbs.engine({ extname: 'hbs' ,\r\n    helpers:{\r\n        count: function(){\r\n            return ++counter + '. ';\r\n        },\r\n        countReset: function(){\r\n            counter = 0;\r\n        },\r\n        space: function(){\r\n            return ' '\r\n        }\r\n    }\r\n}));\r\napp.set('view engine', '.hbs'\r\n\r\n//This is main url for the api to search the word for their meaning\r\nconst url = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n\r\n//This will make us able to work with form data\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\n//This folder is static mostly will be use for css(only be used for this website) and images(not for this website)\r\napp.use(express.static('public'));\r\n\r\n//Main page route\r\napp.get(\"/\", (req, res) => {\r\n    res.render('meaning');\r\n});\r\n\r\n//Main page Logic\r\napp.post(\"/\", (req, res) => {\r\n    //This array will hold the meaning, examples of the word and will pass it \r\n    //to meaning.hbs to print on page\r\n    var meanings = [];\r\n    var data = req.body;\r\n    var audio;\r\n\r\n    console.log(url + data.search);\r\n    fetch(url+data.search)\r\n    .then(response=>response.json())\r\n    .then(json=> {\r\n        // console.log(json[0].meanings[0]);\r\n        //testing looping through all the meanings\r\n        console.log('Meanings of', json[0].word)\r\n        //Logic to search the audio in the phonetics array\r\n        for(var i = 0; i < json[0].phonetics.length; i++){\r\n            if(json[0].phonetics[i].audio != '')\r\n                audio = json[0].phonetics[i].audio;\r\n        }\r\n        // This will held the Name of the word people are serching\r\n        wordName = json[0].word;\r\n\r\n        for(var i = 0; i < json[0].meanings[0].definitions.length; i++){\r\n            //we will use this regular expression\r\n            //to erase all the word inside () in the starting\r\n            //of the word's meaning like (noun )\r\n            const regex = /\\([^)]*\\)/g;\r\n            var readyToReplace =  json[0].meanings[0].definitions[i].definition;\r\n            var meaning = readyToReplace.replace(regex, '');\r\n            // console.log(i+1 , meaning.trim());\r\n            console.log(json[0]);\r\n\r\n            meanings.push({\r\n                meaning: meaning.trim(),\r\n                examples: json[0].meanings[0].definitions[i].example,\r\n                synonyms: json[0].meanings[0].definitions[i].synonyms,\r\n                antonyms: json[0].meanings[0].definitions[i].antonyms\r\n            });\r\n            \r\n            // console.log(json[0].meanings[0].definitions[i].antonyms)\r\n        }\r\n        res.render('meaning', { \r\n            meanings: meanings,\r\n            audio: audio,\r\n            wordName: wordName\r\n        });\r\n    }).catch(err=>{\r\n        res.render('meaning', {\r\n            wordName: data.search,\r\n            meanings: null,\r\n            error: `Sorry, we could not find the meaning of ${data.search}. Please try agagin!`\r\n        })\r\n    })\r\n\r\n});\r\n\r\n//Starting Server\r\napp.listen(Http_port, () => {\r\n    console.log(`Server running on port ${Http_port}`);\r\n});\r\n\r\n\r\n\r\n/*\r\n  const apiKey = \"nIYHxcdaMxThcM2g5E+3mg==72UdANVwwVN7ZS1g\";\r\n     var synonyms = [];\r\n     var antonyms = [];\r\n     fetch(url, {\r\n         method: 'GET',\r\n         headers: {\r\n           'X-Api-Key': apiKey,\r\n           'Accept': 'application/json'\r\n         }\r\n       })\r\n       .then(response => response.json())\r\n       .then(array => {\r\n             synonyms = array.synonyms;\r\n             antonyms = array.antonyms;\r\n         });\r\n*/"
        }
    ]
}